<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="itwillbs.p2c3.boogimovie.mapper.AdminMapper">
	
<!-- 회원 리스트 조회 -->
	<select id="selectMemberList" resultType="hashmap">
		SELECT * 
		FROM member
	</select>

<!-- 회원 상세보기 -->
	<select id="selectMember" resultType="itwillbs.p2c3.boogimovie.vo.MemberVO">
		SELECT * 
		FROM member
		WHERE member_id = #{id}
	</select>
	
<!-- 회원 삭제 -->
	<delete id="deleteMember">
		DELETE FROM member
		WHERE member_id = #{id}
	</delete>
	
<!-- 리뷰 리스트 조회 -->
	<select id="selectReviewList" resultType="itwillbs.p2c3.boogimovie.vo.ReviewVO">
		SELECT * 
		FROM review
	</select>
	
<!-- 리뷰 삭제 -->
	<delete id="deleteReview">
		DELETE FROM review
		WHERE review_num = #{review_num}
	</delete>
	
<!-- 예매 리스트 조회 -->
	<select id="selectReserveList" resultType="hashmap">
		SELECT * 
		FROM admin_movieList
	</select>

<!-- 예매 리스트 조회 -->
	<select id="selectReserve" resultType="hashmap">
		SELECT * 
		FROM admin_movieList
		WHERE reservation_num = #{reservation_num}
	</select>
	
<!-- 영화 리스트 조회 -->
	<select id="selectMovieList" resultType="hashmap">
		SELECT * 
		FROM movie
	</select>

<!-- 영화 상세보기 -->
	<select id="selectMovie" resultType="itwillbs.p2c3.boogimovie.vo.MovieVO">
		SELECT * 
		FROM movie
		WHERE movie_num = #{movie_num}
	</select>

<!-- 영화 확인 -->
	<select id="getMovie" resultType="itwillbs.p2c3.boogimovie.vo.MovieVO">
		SELECT * 
		FROM movie
		WHERE movie_name = #{movie_name}
	</select>
	
<!-- 	영화 등록하기 -->
	<insert id="insertMovie" >
		INSERT INTO movie
		(	  movie_name
			, movie_director
			, movie_poster
			, movie_trailler
			, movie_open_date
			, movie_end_date
			, movie_status
			, movie_grade
			, movie_summary
			, movie_runtime
			, movie_stillCut
			, movie_stillCut2
			, movie_stillCut3
			, movie_genre
		)
		VALUES
		(	  #{movie_name}
			, #{movie_director}
			, #{movie_poster}
			, #{movie_trailler}
			, #{movie_open_date}
			, #{movie_end_date}
			, #{movie_status}
			, #{movie_grade}
			, #{movie_summary}
			, #{movie_runtime}
			, #{movie_stillCut}
			, #{movie_stillCut2}
			, #{movie_stillCut3}
			, #{movie_genre}
			
		)
	</insert>
	
<!-- 영화 수정 업데이트 -->
	<update id="updateMovie">
		UPDATE movie
		SET movie_name = #{movie_name}
		  , movie_director = #{movie_director}
		  , movie_poster = #{movie_poster}
		  , movie_trailler = #{movie_trailler}
		  , movie_open_date = #{movie_open_date}
		  , movie_end_date = #{movie_end_date}
		  , movie_status = #{movie_status}
		  , movie_grade = #{movie_grade}
		  , movie_summary = #{movie_summary}
		  , movie_runtime = #{movie_runtime}
		  , movie_stillCut = #{movie_stillCut}
		  , movie_stillCut2 = #{movie_stillCut2}
		  , movie_stillCut3 = #{movie_stillCut3}
		  , movie_genre = #{movie_genre}
		WHERE movie_num = #{movie_num}
	</update>
	
	<delete id="deleteMovie">
		DELETE FROM movie
		WHERE movie_num = #{movie_num}
	</delete>
	
<!-- 공지사항 입력 -->

	<!-- 여기서부터 csc 관련 sql=========================================== -->
	<insert id="insertNotice" >
<!-- 		<selectKey keyProperty="notice_num" resultType="int" order="BEFORE"> -->
<!-- 			SELECT IFNULL(MAX(notice_num), 0) FROM notice -->
<!-- 		</selectKey> -->
		
	INSERT INTO notice (notice_num, notice_subject, notice_content, notice_date, notice_category, theater_num )
	VALUES (null, #{notice.notice_subject}, #{notice.notice_content}, now(), #{notice.notice_category}, #{theater_num})
		
	</insert>
	
	<select id="selectNoticeList" resultType="itwillbs.p2c3.boogimovie.vo.NoticeVO">
		SELECT n.notice_num
			  ,n.notice_subject
			  ,n.notice_content
			  ,t.theater_name
			  ,n.notice_date
		FROM notice n JOIN theater t 
		ON n.theater_num = t.theater_num
		ORDER BY notice_num DESC
		LIMIT #{startRow}, #{listLimit}
	</select>
	<insert id="insertReply">
		<selectKey keyProperty="oto_reply_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(oto_reply_num), 0) FROM OTO_reply
		</selectKey>
		INSERT INTO OTO_reply
		VALUES (#{oto_reply_num} + 1,
				#{oto_num}, 
				#{reply.oto_reply_content},
				now())
	</insert>
	<delete id="deleteNotice">
		DELETE FROM notice
		WHERE notice_num = #{notice_num}
	</delete>
	<select id="getNoticeListCount" resultType="int">
		SELECT COUNT(notice_num) FROM notice
	</select>
	<select id="selectNotice">
		WITH TMP AS (
			SELECT MIN(notice_num) as min
			    , MAX(notice_num) as max
		     FROM notice
		)
		SELECT n.notice_num
			 , n.notice_subject
			 , n.notice_content
			 , n.notice_date
			 , n.notice_category
			 , t.theater_name
		     , CASE WHEN notice_num = (SELECT min FROM TMP) || notice_num = (SELECT max FROM TMP) THEN 'return false' 
																								  ELSE '' END AS disable
		  FROM notice n
		  JOIN theater t
		  ON n.theater_num = t.theater_num
		  WHERE notice_num = #{notice_num}

	</select>
	<select id="selectMaxNotice" resultType="int">
		SELECT MAX(notice_num)
		FROM notice
	</select>
	
</mapper>
