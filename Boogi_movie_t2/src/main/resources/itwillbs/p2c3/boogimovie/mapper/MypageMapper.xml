<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="itwillbs.p2c3.boogimovie.mapper.MypageMapper">
  
  	<!-- 메인페이지 id -->
    <select id="selectMember" resultType="itwillbs.p2c3.boogimovie.vo.MemberVO">
        SELECT * FROM member WHERE member_id = #{id}
    </select>
    
	<!-- My극장 극장 전체리스트 -->
    <select id="selectTheater" resultType="itwillbs.p2c3.boogimovie.vo.TheaterVO">
    	SELECT theater_num, theater_name
    	FROM theater
    </select>
    
    <!-- My극장 자주가는 영화관 -->
    <select id="selectMyTheater" resultType="itwillbs.p2c3.boogimovie.vo.MemberVO">
    	SELECT member_my_theater1, member_my_theater2, member_my_theater3
    	FROM member
		WHERE member_id = #{member_id};
    </select>
    
    <!-- 예매내역 -->
	<select id="selectMovieReservation" resultType="map">
	    SELECT
		    movie.movie_poster,
		    movie.movie_name,
		    screen_session.scs_date,
		   	CONCAT(screen_session.scs_start_time, ' ~ ', screen_session.scs_end_time) AS session_time,
		   	CONCAT(theater.theater_name, ' ', screen_info.screen_cinema_num, '관') AS theater_info,
	   	    GROUP_CONCAT(ticket.ticket_seat_info ORDER BY ticket.ticket_seat_info SEPARATOR ', ') AS ticket_seat_info,
<!-- 		    ticket.ticket_seat_info, -->
<!-- 		    ticket.ticket_price -->
	        SUM(ticket.ticket_price) AS total_ticket_price
		    
		FROM
		    pay
		JOIN member ON member.member_id = pay.member_id 
		JOIN screen_session ON screen_session.scs_num = pay.scs_num
		JOIN movie ON movie.movie_num = screen_session.movie_num 
		JOIN ticket ON ticket.ticket_pay_num = pay.ticket_pay_num
		JOIN screen_info ON screen_info.screen_num = screen_session.screen_num
		JOIN theater ON theater.theater_num = screen_info.theater_num
    WHERE
        member.member_id = #{member_id}
    <choose>
        <when test="status == '결제' and startRow == null and listLimit == null">
            AND pay.ticket_pay_status = '결제'
            GROUP BY
                ticket.ticket_pay_num, movie.movie_poster, movie.movie_name, screen_session.scs_date, 
                screen_session.scs_start_time, screen_session.scs_end_time, theater.theater_name, screen_info.screen_cinema_num
            ORDER BY
                screen_session.scs_date ASC, screen_session.scs_start_time ASC, screen_session.scs_num ASC
        </when>
        <when test="status == '취소'">
            AND pay.ticket_pay_status = '취소'
            GROUP BY
                ticket.ticket_pay_num, movie.movie_poster, movie.movie_name, screen_session.scs_date, 
                screen_session.scs_start_time, screen_session.scs_end_time, theater.theater_name, screen_info.screen_cinema_num
            ORDER BY
                screen_session.scs_date ASC, screen_session.scs_start_time ASC, screen_session.scs_num ASC
            LIMIT #{startRow}, #{listLimit}
        </when>
        <otherwise>
            AND pay.ticket_pay_status = '결제'
            GROUP BY
                ticket.ticket_pay_num, movie.movie_poster, movie.movie_name, screen_session.scs_date, 
                screen_session.scs_start_time, screen_session.scs_end_time, theater.theater_name, screen_info.screen_cinema_num
            ORDER BY
                screen_session.scs_date ASC, screen_session.scs_start_time ASC, screen_session.scs_num ASC
            LIMIT #{startRow}, #{listLimit}
        </otherwise>
    </choose>
</select>
    
    <!-- 예매한 영화 갯수 -->
    <select id="selectResvCount" resultType="int">
	   SELECT COUNT(screen_session.scs_num)
		FROM
		    pay
		JOIN member ON member.member_id = pay.member_id 
		JOIN screen_session ON screen_session.scs_num = pay.scs_num
		JOIN movie ON movie.movie_num = screen_session.movie_num 
		JOIN ticket ON ticket.ticket_pay_num = pay.ticket_pay_num
		JOIN screen_info ON screen_info.screen_num = screen_session.screen_num
		JOIN theater ON theater.theater_num = screen_info.theater_num
       	WHERE
        member.member_id = #{member_id}
        <if test="status.equals('결제')">
            AND pay.ticket_pay_status = '결제'
        </if>
        <if test="status.equals('취소')">
            AND pay.ticket_pay_status = '취소'
        </if>
    </select>
    
    
    <select id="selectStorePay" resultType="itwillbs.p2c3.boogimovie.vo.StorePayVO">
 	    SELECT 
		    store_pay_cancel_date,
		    store_pay_date,
		    store_pay_price,
		    store_pay_type,
		    store_pay_status,
		    store_pay_num
    	FROM 
    		store_pay
   		WHERE 
    		member_id = #{member_id} 
    </select>
    
    <select id="selectStorePayCount" resultType="int">
    	SELECT COUNT(store_pay_num)
    	FROM store_pay
    	WHERE member_id = #{member_id}
    </select>
    
    <!-- 회원정보 -->
    <select id="selectDbMember" resultType="itwillbs.p2c3.boogimovie.vo.MemberVO">
    	SELECT * FROM member WHERE member_id = #{member_id}
    </select>
    
    <!-- 정보수정 -->
    <!-- 이름, 아이디, 비번, 생년월일, 주소, 이메일, 폰번, 취향 -->
    <update id="updateMember">
 		UPDATE member
		SET
			<!-- 새 패스워드(passwd) 입력 여부에 따라 패스워드 변경 여부 결정 -->
			<!-- 마이바티스 동적 SQL 기능 중 <if></if> 활용하여 패스워드 변경 작업을 동적으로 처리 -->
			<!-- 주의! 비교에 사용될 파라미터는 #{} 또는 ${} 제외하고 표현 -->
			<!-- passwd 파라미터가 null 이 아니고 널스트링('')도 아닐 경우 패스워드 변경 -->
			<!-- (실제로는 패스워드 미입력 시 널스트링이 전달되므로 null 값 판별 생략 가능) -->
			<if test="member_pwd != null and !member_pwd.equals('')">
				member_pwd = #{member_pwd},
			</if>
			member_birth = #{member_birth}
			, member_addr = #{member_addr}
			, member_email = #{member_email}
			, member_tel = #{member_tel}
			, member_movie_genre = #{member_movie_genre}
		WHERE
			member_id = #{member_id}
    
    </update>

		<update id="updateMyTheater">
		    UPDATE member
		    <set> <!-- 자동으로 쉼표 처리. 각 항목 뒤에 쉼표를 추가하고 조건이 충족되지 않으면 마지막 쉼표를 제거함  -->
	   			<if test="checkedValues[0] != null and !checkedValues[0].equals('')">
			    	member_my_theater1 = #{checkedValues[0]},
			     </if>
			    <if test="checkedValues[0] == null">
			    	member_my_theater1 = null,
			    </if>
	   			<if test="checkedValues[1] != null and !checkedValues[1].equals('')">
			        member_my_theater2 = #{checkedValues[1]},
				</if>
				<if test="checkedValues[1] == null">
			  		member_my_theater2 = null,
				</if>
	   			<if test="checkedValues[2] != null and !checkedValues[2].equals('')">
			        member_my_theater3 = #{checkedValues[2]}
				</if>
				<if test="checkedValues[2] == null">
				    member_my_theater3 = null,
				</if>
			</set>
<!-- 			SET member_my_theater = CASE WHEN member_my_theater = #{checkedValues[0]} THEN checkedValues[0] ELSE NULL, -->
		    WHERE member_id = #{member_id}
		</update>

    <!-- 탈퇴처리 -->
   	<!-- member 테이블의 member_status 컬럼값을 3(탈퇴)로 변경 탈퇴일자(withdraw_date) 를 now() 함수 -->
    <update id="updateMemberForWithdraw">
   		UPDATE member
		SET member_status = '탈퇴',
			member_withdraw_date = now()
		WHERE
			member_id = #{member_id}
    </update>
    
    <!-- 예매취소  -->
    <update id="updateMovieStatus">
    	UPDATE pay
    	SET ticket_pay_status = '취소', ticket_pay_cancel_date = now()
    	WHERE
    		member_id = #{member_id} AND ticket_pay_status = '예매'
    </update>
    
</mapper>